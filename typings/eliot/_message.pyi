from ._action import TaskLevel as TaskLevel, log_message as log_message
from _typeshed import Incomplete
from pyrsistent import PClass

MESSAGE_TYPE_FIELD: str
TASK_UUID_FIELD: str
TASK_LEVEL_FIELD: str
TIMESTAMP_FIELD: str
EXCEPTION_FIELD: str
REASON_FIELD: str

class Message:
    @classmethod
    def new(_class, _serializer: Incomplete | None = ..., **fields): ...
    @classmethod
    def log(_class, **fields) -> None: ...
    def __init__(self, contents, serializer: Incomplete | None = ...) -> None: ...
    def bind(self, **fields): ...
    def contents(self): ...
    def write(
        self, logger: Incomplete | None = ..., action: Incomplete | None = ...
    ) -> None: ...

class WrittenMessage(PClass):
    @property
    def timestamp(self): ...
    @property
    def task_uuid(self): ...
    @property
    def task_level(self): ...
    @property
    def contents(self): ...
    @classmethod
    def from_dict(cls, logged_dictionary): ...
    def as_dict(self): ...
