from ._message import (
    EXCEPTION_FIELD as EXCEPTION_FIELD,
    MESSAGE_TYPE_FIELD as MESSAGE_TYPE_FIELD,
    REASON_FIELD as REASON_FIELD,
)
from ._traceback import (
    TRACEBACK_MESSAGE as TRACEBACK_MESSAGE,
    write_traceback as write_traceback,
)
from ._util import saferepr as saferepr, safeunicode as safeunicode
from ._validation import ValidationError as ValidationError
from .json import EliotJSONEncoder as EliotJSONEncoder
from _typeshed import Incomplete
from pyrsistent import PClass
from zope.interface import Interface

DESTINATION_FAILURE: str

class BufferingDestination:
    messages: Incomplete
    def __init__(self) -> None: ...
    def __call__(self, message) -> None: ...

class Destinations:
    def __init__(self) -> None: ...
    def addGlobalFields(self, **fields) -> None: ...
    def send(self, message, logger: Incomplete | None = ...) -> None: ...
    def add(self, *destinations) -> None: ...
    def remove(self, destination) -> None: ...

class ILogger(Interface):
    def write(dictionary, serializer: Incomplete | None = ...) -> None: ...

class Logger:
    def write(self, dictionary, serializer: Incomplete | None = ...) -> None: ...

def exclusively(f): ...

class MemoryLogger:
    def __init__(self, encoder=...) -> None: ...
    tracebackMessages: Incomplete
    def flushTracebacks(self, exceptionType): ...
    flush_tracebacks: Incomplete
    def write(self, dictionary, serializer: Incomplete | None = ...) -> None: ...
    def validate(self) -> None: ...
    def serialize(self): ...
    messages: Incomplete
    serializers: Incomplete
    def reset(self) -> None: ...

class FileDestination(PClass):
    file: Incomplete
    encoder: Incomplete
    def __new__(cls, file, encoder=...): ...
    def __call__(self, message) -> None: ...

def to_file(output_file, encoder=...) -> None: ...
